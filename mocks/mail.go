// Code generated by mockery v2.33.0. DO NOT EDIT.

package mocks

import (
	context "context"

	entity "github.com/fadyat/i4u/internal/entity"
	mock "github.com/stretchr/testify/mock"
)

// Mail is an autogenerated mock type for the Mail type
type Mail struct {
	mock.Mock
}

// CreateLabel provides a mock function with given fields: _a0, _a1
func (_m *Mail) CreateLabel(_a0 context.Context, _a1 string) (*entity.Label, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *entity.Label
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*entity.Label, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *entity.Label); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.Label)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUnreadMsgs provides a mock function with given fields: ctx
func (_m *Mail) GetUnreadMsgs(ctx context.Context) <-chan entity.MessageWithError {
	ret := _m.Called(ctx)

	var r0 <-chan entity.MessageWithError
	if rf, ok := ret.Get(0).(func(context.Context) <-chan entity.MessageWithError); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(<-chan entity.MessageWithError)
		}
	}

	return r0
}

// LabelMsg provides a mock function with given fields: _a0, _a1
func (_m *Mail) LabelMsg(_a0 context.Context, _a1 entity.MessageForLabeler) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, entity.MessageForLabeler) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewMail creates a new instance of Mail. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMail(t interface {
	mock.TestingT
	Cleanup(func())
}) *Mail {
	mock := &Mail{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
