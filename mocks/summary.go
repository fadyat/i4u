// Code generated by mockery v2.33.0. DO NOT EDIT.

package mocks

import (
	context "context"

	entity "github.com/fadyat/i4u/internal/entity"
	mock "github.com/stretchr/testify/mock"
)

// Summarizer is an autogenerated mock type for the Summarizer type
type Summarizer struct {
	mock.Mock
}

// GetMsgSummary provides a mock function with given fields: _a0, _a1
func (_m *Summarizer) GetMsgSummary(_a0 context.Context, _a1 entity.Message) (string, error) {
	ret := _m.Called(_a0, _a1)

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, entity.Message) (string, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, entity.Message) string); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, entity.Message) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewSummarizer creates a new instance of Summarizer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewSummarizer(t interface {
	mock.TestingT
	Cleanup(func())
}) *Summarizer {
	mock := &Summarizer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
